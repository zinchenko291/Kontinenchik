import os
import asyncio
import logging
import aioschedule
from datetime import date
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

from db import BotDB


#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)


#–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
groups = { #–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã
    '–∑–∞–ø–∞–¥': 1,
    '–≤–æ—Å—Ç–æ–∫': 2
}


#–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class StateMachine(StatesGroup):
    groupChoose = State()
    wait = State()


#–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(state='*', commands='start')
async def cmdStart(message: types.Message) -> None:
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–ó–∞–ø–∞–¥')
    markup.add('–í–æ—Å—Ç–æ–∫')
    await message.answer(f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–æ–Ω—Ç–∏–Ω–µ–Ω—á–∏–∫ üåè, –∏ —è –±—É–¥—É —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å —Ç–µ–±—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–π —Å–º–µ–Ω—ã.')
    await asyncio.sleep(0.5)
    if db.userExists(message.from_user.id):
        await message.answer(f'–≠–π! –Ø —Ç–µ–±—è —É–∂–µ –∑–Ω–∞—é. –ù–µ –≤–æ–ª–Ω—É–π—Å—è, —è –ø—Ä–æ —Ç–µ–±—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—É–¥—É üòé!')
    else:
        await message.answer('–ú–æ–∂–µ—à—å –Ω–µ –≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è –Ω–∞—Å—á—ë—Ç –ø—Ä–æ–ø—É—Å–∫–∞ –≤—Å—Ç—Ä–µ—á–∏, –≤–µ–¥—å —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ üòâ.')
        await asyncio.sleep(0.5)
        await message.answer(f'–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É–∑–Ω–∞–µ–º –∫—Ç–æ —Ç—ã? ü§î –ò–∑ –∫–∞–∫–æ–π —Ç—ã –≥—Ä—É–ø–ø—ã', reply_markup=markup)
        await StateMachine.groupChoose.set()

#–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã/–ø–æ—Ç–æ–∫–∞
@dp.message_handler(state=StateMachine.groupChoose)
async def cmdChooseGroup(message: types.Message, state: FSMContext) -> None:
    removeMarkup = types.ReplyKeyboardRemove()
    if message.text.lower() in groups.keys():
        await message.answer('–í—Å—ë, —è –∑–∞–ø–∏—Å–∞–ª. –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ. üòé', reply_markup=removeMarkup)
        user = message.from_user
        db.addUser(user.id, user.first_name, groups.get(message.text.lower()), message.chat.id)
        logging.info(f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {user.id}')
        await state.reset_state(with_data=True)
    else:
        await message.answer(f'üòß –ü–æ—Ö–æ–∂–µ —Ç—ã —É–∫–∞–∑–∞–ª –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä—É—é —è –Ω–µ –∑–Ω–∞—é. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?')
        dp.register_message_handler(cmdChooseGroup)

#Help, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫–∏
@dp.message_handler(commands='help')
async def cmdHelp(message: types.Message) -> None:
    await message.answer('–Ø –º–æ–≥—É –≤—ã–≤–æ–¥–∏—Ç—å –≤–∏–¥–µ–æ –æ –Ω–∞—à–∏—Ö –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∫–∞–Ω–∏–∫—É–ª–∞—Ö –∏–ª–∏ –¥–µ–ª–∏—Ç—å—Å—è –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏. üòé')
    await message.answer('/videos - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
    await message.answer('/links - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏')
    logging.info(f'–ö–æ–º–∞–Ω–¥–∞ help –æ—Ç - {message.from_user.id}')

@dp.message_handler(commands='videos')
async def cmdVideos(message: types.Message) -> None:
    await message.answer('–í–æ—Ç –Ω–∞—à–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ:')
    for video in db.getVideos():
        await message.answer(f'<a href="{video[1]}">–í–∏–¥–µ–æ</a> - {video[2]}', parse_mode=types.ParseMode.HTML)
        await asyncio.sleep(0.25)
    logging.info(f'–ö–æ–º–∞–Ω–¥–∞ videos –æ—Ç - {message.from_user.id}')

@dp.message_handler(commands='links')
async def cmdLinks(message: types.Message) -> None:
    await message.answer('–í–æ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:')
    for link in db.getLinks():
        await message.answer(f'<a href="{link[1]}">{link[2]}</a> - {link[3]}', parse_mode=types.ParseMode.HTML)
        await asyncio.sleep(0.25)
    logging.info(f'–ö–æ–º–∞–Ω–¥–∞ links –æ—Ç - {message.from_user.id}')

#–ë–ª–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
async def broadcaster(link: str, eventDate: str, eventName: str, groupId: int):
    day = int(eventDate[0:2])
    month = int(eventDate[3:5])
    year = int('20' + eventDate[6:8])
    users = [i for i in db.getUsersInGroup(groupId)]
    if date.today().day != day and date.today().month != month and date.today().year != year:
        return
    count = 0
    for user in users:
        try:
            await bot.send_message(user[4], f'–ü—Ä–∏–≤–µ—Ç, {user[2]}! –ü—Ä–∏—Ö–æ–¥–∏ –∫ –Ω–∞–º –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - "{eventName}". –¢–æ—Ä–æ–ø–∏—Å—å! üòâ')
            await bot.send_message(user[4], f'–°—Å—ã–ª–∫–∞: {link}')
            await asyncio.sleep(.1)
            count += 1
        except Exception as e:
            logging.error(e)
    logging.info(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {count}/{len(users)}')
    return aioschedule.CancelJob
async def scheduler() -> None:
    groupsIds = [i[0] for i in db.getGroups()]
    eventsByGroup = []
    for groupId in groupsIds:
        eventsByGroup.append([j for j in db.getEventsInGroup(groupId)])
    for group in range(len(groupsIds)):
        events = eventsByGroup[group]
        for event in events:
            eventName = event[1]
            link = event[2]
            date = event[3] #DD.MM.YY;HH:MM
            startAt = f'{date[9:11]}:{date[12:14]}'
            aioschedule.every().day.at(startAt).do(broadcaster, link=link, eventDate=date, eventName=eventName, groupId=groupsIds[group])
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)
async def on_startup(_) -> None:
    asyncio.create_task(scheduler())

if __name__ == '__main__':
    logging.info('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞')
    db = BotDB(os.getenv("DATABASE_FILE_PATH"))
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    db.close()
    logging.info('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞')